/* Autogenerated file. Do not edit manually. */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import type { Token, TokenInterface } from '../Token'

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
    ],
    name: 'allowance',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'approve',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'burn',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'subtractedValue',
        type: 'uint256',
      },
    ],
    name: 'decreaseAllowance',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'addedValue',
        type: 'uint256',
      },
    ],
    name: 'increaseAllowance',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'mint',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transfer',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

const _bytecode =
  '0x60a0604052601260ff1660809060ff1660f81b8152503480156200002257600080fd5b506040518060400160405280600981526020017f506f776572506c617900000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f504f5700000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000a7929190620001b7565b508060049080519060200190620000c0929190620001b7565b505050620000e3620000d7620000e960201b60201c565b620000f160201b60201c565b620002cc565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620001c59062000267565b90600052602060002090601f016020900481019282620001e9576000855562000235565b82601f106200020457805160ff191683800117855562000235565b8280016001018555821562000235579182015b828111156200023457825182559160200191906001019062000217565b5b50905062000244919062000248565b5090565b5b808211156200026357600081600090555060010162000249565b5090565b600060028204905060018216806200028057607f821691505b602082108114156200029757620002966200029d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60805160f81c611e2e620002eb60003960006104ff0152611e2e6000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063a457c2d711610066578063a457c2d71461029d578063a9059cbb146102cd578063dd62ed3e146102fd578063f2fde38b1461032d57610100565b8063715018a61461023b5780638da5cb5b1461024557806395d89b41146102635780639dc29fac1461028157610100565b8063313ce567116100d3578063313ce567146101a157806339509351146101bf57806340c10f19146101ef57806370a082311461020b57610100565b806306fdde0314610105578063095ea7b31461012357806318160ddd1461015357806323b872dd14610171575b600080fd5b61010d610349565b60405161011a91906116bb565b60405180910390f35b61013d60048036038101906101389190611430565b6103db565b60405161014a91906116a0565b60405180910390f35b61015b6103f9565b604051610168919061185d565b60405180910390f35b61018b600480360381019061018691906113e1565b610403565b60405161019891906116a0565b60405180910390f35b6101a96104fb565b6040516101b69190611878565b60405180910390f35b6101d960048036038101906101d49190611430565b610523565b6040516101e691906116a0565b60405180910390f35b61020960048036038101906102049190611430565b6105cf565b005b6102256004803603810190610220919061137c565b610659565b604051610232919061185d565b60405180910390f35b6102436106a1565b005b61024d610729565b60405161025a9190611685565b60405180910390f35b61026b610753565b60405161027891906116bb565b60405180910390f35b61029b60048036038101906102969190611430565b6107e5565b005b6102b760048036038101906102b29190611430565b61086f565b6040516102c491906116a0565b60405180910390f35b6102e760048036038101906102e29190611430565b61095a565b6040516102f491906116a0565b60405180910390f35b610317600480360381019061031291906113a5565b610978565b604051610324919061185d565b60405180910390f35b6103476004803603810190610342919061137c565b6109ff565b005b606060038054610358906119c1565b80601f0160208091040260200160405190810160405280929190818152602001828054610384906119c1565b80156103d15780601f106103a6576101008083540402835291602001916103d1565b820191906000526020600020905b8154815290600101906020018083116103b457829003601f168201915b5050505050905090565b60006103ef6103e8610af7565b8484610aff565b6001905092915050565b6000600254905090565b6000610410848484610cca565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061045b610af7565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156104db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d29061177d565b60405180910390fd5b6104ef856104e7610af7565b858403610aff565b60019150509392505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006105c5610530610af7565b84846001600061053e610af7565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105c091906118af565b610aff565b6001905092915050565b6105d7610af7565b73ffffffffffffffffffffffffffffffffffffffff166105f5610729565b73ffffffffffffffffffffffffffffffffffffffff161461064b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106429061179d565b60405180910390fd5b6106558282610f4b565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6106a9610af7565b73ffffffffffffffffffffffffffffffffffffffff166106c7610729565b73ffffffffffffffffffffffffffffffffffffffff161461071d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107149061179d565b60405180910390fd5b61072760006110ab565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610762906119c1565b80601f016020809104026020016040519081016040528092919081815260200182805461078e906119c1565b80156107db5780601f106107b0576101008083540402835291602001916107db565b820191906000526020600020905b8154815290600101906020018083116107be57829003601f168201915b5050505050905090565b6107ed610af7565b73ffffffffffffffffffffffffffffffffffffffff1661080b610729565b73ffffffffffffffffffffffffffffffffffffffff1614610861576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108589061179d565b60405180910390fd5b61086b8282611171565b5050565b6000806001600061087e610af7565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561093b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109329061181d565b60405180910390fd5b61094f610946610af7565b85858403610aff565b600191505092915050565b600061096e610967610af7565b8484610cca565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610a07610af7565b73ffffffffffffffffffffffffffffffffffffffff16610a25610729565b73ffffffffffffffffffffffffffffffffffffffff1614610a7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a729061179d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610aeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae29061171d565b60405180910390fd5b610af4816110ab565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b66906117fd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610bdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd69061173d565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610cbd919061185d565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610d3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d31906117dd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610daa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da1906116dd565b60405180910390fd5b610db5838383611348565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610e3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e329061175d565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ece91906118af565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f32919061185d565b60405180910390a3610f4584848461134d565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb29061183d565b60405180910390fd5b610fc760008383611348565b8060026000828254610fd991906118af565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461102e91906118af565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611093919061185d565b60405180910390a36110a76000838361134d565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d8906117bd565b60405180910390fd5b6111ed82600083611348565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126a906116fd565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282546112ca9190611905565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161132f919061185d565b60405180910390a36113438360008461134d565b505050565b505050565b505050565b60008135905061136181611dca565b92915050565b60008135905061137681611de1565b92915050565b60006020828403121561138e57600080fd5b600061139c84828501611352565b91505092915050565b600080604083850312156113b857600080fd5b60006113c685828601611352565b92505060206113d785828601611352565b9150509250929050565b6000806000606084860312156113f657600080fd5b600061140486828701611352565b935050602061141586828701611352565b925050604061142686828701611367565b9150509250925092565b6000806040838503121561144357600080fd5b600061145185828601611352565b925050602061146285828601611367565b9150509250929050565b61147581611939565b82525050565b6114848161194b565b82525050565b600061149582611893565b61149f818561189e565b93506114af81856020860161198e565b6114b881611a51565b840191505092915050565b60006114d060238361189e565b91506114db82611a62565b604082019050919050565b60006114f360228361189e565b91506114fe82611ab1565b604082019050919050565b600061151660268361189e565b915061152182611b00565b604082019050919050565b600061153960228361189e565b915061154482611b4f565b604082019050919050565b600061155c60268361189e565b915061156782611b9e565b604082019050919050565b600061157f60288361189e565b915061158a82611bed565b604082019050919050565b60006115a260208361189e565b91506115ad82611c3c565b602082019050919050565b60006115c560218361189e565b91506115d082611c65565b604082019050919050565b60006115e860258361189e565b91506115f382611cb4565b604082019050919050565b600061160b60248361189e565b915061161682611d03565b604082019050919050565b600061162e60258361189e565b915061163982611d52565b604082019050919050565b6000611651601f8361189e565b915061165c82611da1565b602082019050919050565b61167081611977565b82525050565b61167f81611981565b82525050565b600060208201905061169a600083018461146c565b92915050565b60006020820190506116b5600083018461147b565b92915050565b600060208201905081810360008301526116d5818461148a565b905092915050565b600060208201905081810360008301526116f6816114c3565b9050919050565b60006020820190508181036000830152611716816114e6565b9050919050565b6000602082019050818103600083015261173681611509565b9050919050565b600060208201905081810360008301526117568161152c565b9050919050565b600060208201905081810360008301526117768161154f565b9050919050565b6000602082019050818103600083015261179681611572565b9050919050565b600060208201905081810360008301526117b681611595565b9050919050565b600060208201905081810360008301526117d6816115b8565b9050919050565b600060208201905081810360008301526117f6816115db565b9050919050565b60006020820190508181036000830152611816816115fe565b9050919050565b6000602082019050818103600083015261183681611621565b9050919050565b6000602082019050818103600083015261185681611644565b9050919050565b60006020820190506118726000830184611667565b92915050565b600060208201905061188d6000830184611676565b92915050565b600081519050919050565b600082825260208201905092915050565b60006118ba82611977565b91506118c583611977565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156118fa576118f96119f3565b5b828201905092915050565b600061191082611977565b915061191b83611977565b92508282101561192e5761192d6119f3565b5b828203905092915050565b600061194482611957565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156119ac578082015181840152602081019050611991565b838111156119bb576000848401525b50505050565b600060028204905060018216806119d957607f821691505b602082108114156119ed576119ec611a22565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b611dd381611939565b8114611dde57600080fd5b50565b611dea81611977565b8114611df557600080fd5b5056fea264697066735822122055803c33f3c2598e70a7f4d935cf6badd6f7c510dbac0c0668578313e1ace7ad64736f6c63430008040033'

export class Token__factory extends ContractFactory {
  constructor(...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0])
    } else {
      super(...args)
    }
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Token> {
    return super.deploy(overrides || {}) as Promise<Token>
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): Token {
    return super.attach(address) as Token
  }
  connect(signer: Signer): Token__factory {
    return super.connect(signer) as Token__factory
  }
  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): TokenInterface {
    return new utils.Interface(_abi) as TokenInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Token {
    return new Contract(address, _abi, signerOrProvider) as Token
  }
}
